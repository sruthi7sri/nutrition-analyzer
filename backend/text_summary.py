import re
from transformers import pipeline

# Initialize the T5 summarization pipeline once.
t5_summarizer = pipeline("summarization", model="t5-base")

def summarize_nutrition(nutrition_text: str) -> str:
    """
    Summarize the nutrition text using the t5-base model,
    and then postprocess the summary for improved readability.
    
    Args:
        nutrition_text (str): The raw nutrition label text.
    
    Returns:
        str: A summarized version of the nutrition content.
    """
    # Generate a summary with extended length to retain more context.
    summary_output = t5_summarizer(
        nutrition_text,
        max_length=200,
        min_length=100,
        do_sample=False
    )
    summary = summary_output[0]['summary_text']
    # Postprocess the summary to remove duplicates and extra whitespace.
    return postprocess_summary(summary)

def postprocess_summary(summary: str) -> str:
    """
    Postprocesses the summary by:
      - Removing extra whitespace.
      - Removing duplicate sentences (case-insensitive).
      - Ensuring the summary ends with a period.
    
    Args:
        summary (str): The raw summary generated by the model.
    
    Returns:
        str: A cleaned and more coherent summary.
    """
    # Remove extra spaces and newlines.
    summary = re.sub(r'\s+', ' ', summary).strip()
    
    # Split the summary into sentences (using a period as a delimiter).
    sentences = summary.split('. ')
    seen = set()
    filtered_sentences = []
    
    # Remove duplicate sentences (ignoring case).
    for sentence in sentences:
        sentence_clean = sentence.lower().strip()
        if sentence_clean not in seen:
            seen.add(sentence_clean)
            filtered_sentences.append(sentence.strip())
    
    # Join the filtered sentences back into a summary.
    summary = '. '.join(filtered_sentences)
    
    # Ensure the summary ends with a period.
    if not summary.endswith('.'):
        summary += '.'
    return summary

# Static daily intake guidelines (example values; replace with authoritative data)
DAILY_INTAKE_GUIDELINES = {
    "calories": 2000,  # kcal
    "fat": 70,         # grams
    "sugars": 50,      # grams
    "sodium": 2300,    # mg
    # Add more nutrients as needed.
}

def generate_daily_intake_recommendation(nutrition_summary: str) -> str:
    """
    Based on the summarized nutrition content, provide daily intake recommendations.
    Here we just append static guidelines as an example.
    
    Args:
        nutrition_summary (str): The summary text of the nutrition label.
    
    Returns:
        str: A message with daily intake recommendations.
    """
    recommendations = []
    for nutrient, guideline in DAILY_INTAKE_GUIDELINES.items():
        recommendations.append(f"{nutrient.capitalize()}: {guideline}")
    
    return "Daily Intake Guidelines (approx.): " + ", ".join(recommendations)
